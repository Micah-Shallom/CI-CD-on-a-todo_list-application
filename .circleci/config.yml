version: 2.1
orbs:
  versioning: streamroot/versioning@0.1.1

##############################################################################################
commands: 
  generate:
    parameters:
      rc_branch:
        description: Regex to determine release candidate branches
        type: string
        default: ^main$
    steps:
      - checkout
      # - versioning/generate
      - run:
          name: "Add `VERSION` environment variable to `BASH_ENV`"
          command: |
            VERSION=$CIRCLE_TAG
            if [ -z "$VERSION" ]; then
              SHA="$(git rev-parse --short HEAD)"

              VERSION="$(git describe --tags `git rev-list --tags --max-count=1` || true)"
              VERSION=${VERSION:-'0.0.0'}
              MAJOR="${VERSION%%.*}"; VERSION="${VERSION#*.}"
              MINOR="${VERSION%%.*}"; VERSION="${VERSION#*.}"
              PATCH="${VERSION%%.*}"; VERSION="${VERSION#*.}"

              if [[ "$CIRCLE_BRANCH" =~ <<parameters.rc_branch>> ]]; then
                VERSION="$MAJOR.$((MINOR+1)).$PATCH"
                echo $VERSION
              else
                VERSION="$MAJOR.$((MINOR+1)).$PATCH"
                echo $VERSION
              fi
            fi
            echo $VERSION >> ~/project/.circleci/version.txt
            cat ~/project/.circleci/version.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/version.txt
############################################################################################################################

jobs:
  build-app:
      docker:
        - image: cimg/node:15.0.1
      steps:
        - checkout
        - restore_cache:
            keys: [application-build]
        - run:
            name: Building our application with node
            command: |
              npm install
        - save_cache:
            paths: [./node_modules]
            key: application-build

  audit-app:
    docker: 
      - image: cimg/node:15.0.1
    steps:  
      - checkout
      - restore_cache:  
          keys: [application-build]
      - run:
          name: job running security audit on frontend build
          command: |
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  deploy-frontend:
    docker:
      - image: cimg/go:1.17
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - generate
      # ... steps for building/testing app ...

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      # build and push Docker image
      # using circle_build_num for dummy semantic versioning
      - attach_workspace:
          at: ~/
      - run: 
          name: Running dummy semantic versioning for image builds using circle ci builds
          command: |
            export TAG=$(cat ~/project/.circleci/version.txt)
            # export TAG=0.1.$CIRCLE_BUILD_NUM
      - run: 
          name: Dockerizing application frontend and pushing into dockerhub
          command: |
            docker build -t mshallom/practicerepo:$TAG .
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      # - run:
      #     name: Running vulnerability scan on image before remote registry deployment
      #     command: |

      - run:
          name: Push image to dockerhub registry
          command: |
            docker push mshallom/practicerepo:$TAG
      - run:
          name: Running docker compose which runs container for app, and database
          command: |
            docker-compose -f docker-compose.yaml up -d 

workflows:
  new-workflow:
    jobs:
      - deploy-frontend